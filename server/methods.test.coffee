import { chai } from 'meteor/practicalmeteor:chai'
import Articles from '/imports/collections/articles'
import Incidents from '/imports/collections/incidentReports'
import {autogenerateDocumentIncidents } from '/server/methods'

testArticle = {
  "_id": "KGLJ9Xg9ivgvJyiAc",
  "content": "There were 19 cases of Ebola in Seattle, Washington on June 11, 2010.",
  "title": "Test Article",
  "publishDateTZ": "EST",
  "publishDate": new Date("2017-08-17T16:00:00.000Z"),
  "userEventIds": [
    null
  ],
  "addedByUserId": "ygBckhuWfRTFBmFgy",
  "addedByUserName": "Nathan",
  "addedDate": new Date("2017-08-18T13:29:59.894Z"),
  "enhancements": {
    "source": {
      "cleanContent": {
        "content": "There were 19 cases of Ebola in Seattle, Washington on June 11, 2010."
      }
    },
    "dateOfDiagnosis": "2017-08-18T13:29:59.819879",
    "diseases": [
      {
        "keywords": [],
        "inferred_keywords": [],
        "name": "Fever",
        "probability": 0.953717367262465
      },
      {
        "keywords": [
          {
            "score": 0.953717367262465,
            "name": "ebola"
          }
        ],
        "inferred_keywords": [],
        "name": "Hemorrhagic Fever",
        "probability": 0.953717367262465
      },
      {
        "keywords": [
          {
            "score": 0.953717367262465,
            "name": "ebola"
          }
        ],
        "inferred_keywords": [],
        "name": "Ebola",
        "probability": 0.953717367262465
      }
    ],
    "diagnoserVersion": "0.4.0",
    "features": [
      {
        "count": 19,
        "text": "19 cases",
        "label": "19 cases",
        "textOffsets": [
          [
            11,
            19
          ]
        ],
        "attributes": [
          "case"
        ],
        "type": "count"
      },
      {
        "modifiers": [
          "case"
        ],
        "text": "19 cases",
        "cumulative": false,
        "value": "19 cases",
        "textOffsets": [
          [
            11,
            19
          ]
        ],
        "type": "caseCount"
      },
      {
        "textOffsets": [
          [
            32,
            51
          ]
        ],
        "type": "location",
        "name": "Seattle",
        "geoname": {
          "id": "5809844",
          "name": "Seattle",
          "alternateNames": [],
          "latitude": 47.60621,
          "longitude": -122.33207,
          "featureClass": "P",
          "featureCode": "PPLA2",
          "countryCode": "US",
          "admin1Code": "WA",
          "admin2Code": "033",
          "population": 684451,
          "admin2Name": "King County",
          "admin1Name": "Washington",
          "countryName": "United States"
        }
      },
      {
        "textOffsets": [
          [
            55,
            68
          ]
        ],
        "timeRange": {
          "begin": {
            "date": 11,
            "month": 6,
            "year": 2010
          },
          "end": {
            "date": 12,
            "month": 6,
            "year": 2010
          }
        },
        "type": "datetime",
        "name": "June 11, 2010",
        "value": "June 11, 2010"
      },
      {
        "textOffsets": [
          [
            23,
            28
          ]
        ],
        "type": "diseases",
        "value": "ebola"
      },
      {
        "text": "Ebola",
        "resolutions": [
          {
            "entity_id": "http://purl.obolibrary.org/obo/DOID_4325",
            "weight": 3,
            "entity": {
              "type": "disease",
              "id": "http://purl.obolibrary.org/obo/DOID_4325",
              "label": "Ebola hemorrhagic fever"
            }
          }
        ],
        "type": "resolvedKeyword",
        "textOffsets": [
          [
            23,
            28
          ]
        ]
      }
    ]
  }
}

testIncident = {
  "_id": "ADzsaBZWtKEyhSJdK",
  "locations": [
    {
      "id": "5809844",
      "name": "Seattle",
      "alternateNames": [],
      "latitude": 47.60621,
      "longitude": -122.33207,
      "featureClass": "P",
      "featureCode": "PPLA2",
      "countryCode": "US",
      "admin1Code": "WA",
      "admin2Code": "033",
      "population": 684451,
      "admin2Name": "King County",
      "admin1Name": "Washington",
      "countryName": "United States"
    }
  ],
  "dateRange": {
    "start": "2010-05-11T00:00:00.000Z",
    "end": "2010-05-12T23:59:59.999Z",
    "type": "precise"
  },
  "cases": 54321,
  "type": "caseCount",
  "articleId": "KGLJ9Xg9ivgvJyiAc",
  "resolvedDisease": {
    "id": "http://purl.obolibrary.org/obo/DOID_4325",
    "text": "Ebola hemorrhagic fever"
  },
  "species": {
    "id": "tsn:180092",
    "text": "Homo sapiens"
  },
  "annotations": {
    "case": [
      {
        "textOffsets": [
          53,
          55
        ],
        "text": "to"
      }
    ],
    "location": [
      {
        "textOffsets": [
          32,
          51
        ]
      }
    ],
    "date": [
      {
        "textOffsets": [
          55,
          68
        ]
      }
    ],
    "disease": [
      {
        "textOffsets": [
          23,
          28
        ]
      }
    ]
  },
  "autogenerated": false,
  "addedDate": "2017-08-18T15:44:53.903Z"
}

describe 'Methods', ->
  it 'autogenerates incidents from a document', ->
    Articles.remove(testArticle._id)
    Incidents.remove(articleId: testArticle._id)
    Articles.insert(testArticle)
    Incidents.insert(testIncident)
    autogenerateDocumentIncidents(testArticle)
    # Test that rerunning the function doesn't create more incidents.
    autogenerateDocumentIncidents(testArticle)
    chai.assert(Incidents.find(articleId: testArticle._id).count() == 2)
    # Alter the count to test count updating
    Incidents.update(
      articleId: testArticle._id
      cases: 19
    ,
      $set: cases: 20
    )
    # Test that the counts are updated when the function reruns
    autogenerateDocumentIncidents(testArticle)
    chai.assert(Incidents.find(
      articleId: testArticle._id
      cases: 19
    ).count() == 1)
    # Test that user modified counts are not updated when the function reruns
    Incidents.update(
      articleId: testArticle._id
      cases: 19
    ,
      $set:
        modifiedByUserId: "ygBckhuWfRTFBmFgy"
        cases: 20
    )
    autogenerateDocumentIncidents(testArticle)
    chai.assert(Incidents.find(
      articleId: testArticle._id
      cases: 20
    ).count() == 1)
    Articles.remove(testArticle._id)
    Incidents.remove(articleId: testArticle._id)
