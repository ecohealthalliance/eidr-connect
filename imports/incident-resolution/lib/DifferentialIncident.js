// Generated by CoffeeScript 1.12.7
(function() {
  var DifferentialIncident, LocationTree, MILLIS_PER_DAY, _;

  LocationTree = require('./LocationTree');

  _ = require('underscore');

  MILLIS_PER_DAY = 1000 * 60 * 60 * 24;

  DifferentialIncident = (function() {
    function DifferentialIncident(incident) {
      var i, len, prop, properties;
      properties = ['startDate', 'endDate', 'count', 'type', 'locations', 'cumulative', 'originalIncidents'];
      if (properties.every(function(p) {
        return p in incident;
      })) {
        for (i = 0, len = properties.length; i < len; i++) {
          prop = properties[i];
          this[prop] = incident[prop];
        }
      } else {
        this.startDate = new Date(incident.dateRange.start);
        this.startDate.setUTCHours(0);
        this.startDate.setUTCMinutes(0);
        this.startDate.setUTCSeconds(0);
        this.startDate.setUTCMilliseconds(0);
        this.endDate = new Date(incident.dateRange.end);
        this.endDate.setUTCMinutes(70);
        this.endDate.setUTCHours(0);
        this.endDate.setUTCMinutes(0);
        this.endDate.setUTCSeconds(0);
        this.endDate.setUTCMilliseconds(0);
        if (this.startDate > this.endDate) {
          console.log(incident);
          throw new Error("Invalid incident: Dates out of order.");
        } else if (Number(this.startDate) === Number(this.endDate) && !incident.dateRange.cumulative) {
          this.endDate.setUTCDate(this.endDate.getUTCDate() + 1);
        }
        this.count = incident.cases || incident.deaths;
        this.type = _.keys(_.pick(incident, 'cases', 'deaths'))[0];
        this.locations = LocationTree.from(incident.locations || []).children.map(function(x) {
          return x.value;
        });
        this.cumulative = incident.dateRange.cumulative;
        this.originalIncidents = [incident];
      }
      this.initialize();
    }

    DifferentialIncident.prototype.initialize = function() {
      var ref;
      this.duration = (Number(this.endDate) - Number(this.startDate)) / MILLIS_PER_DAY;
      this.rate = this.count / this.duration / this.locations.length;
      this.diseaseId = (ref = this.originalIncidents[0].resolvedDisease) != null ? ref.id : void 0;
      return this;
    };

    DifferentialIncident.prototype.truncated = function(dateRange) {
      var newDuration, newEndDate, newStartDate;
      newStartDate = new Date(this.startDate);
      newEndDate = new Date(this.endDate);
      if (this.startDate < dateRange.start) {
        newStartDate = new Date(dateRange.start);
      }
      if (this.endDate > dateRange.end) {
        newEndDate = new Date(dateRange.end);
      }
      newDuration = (Number(newEndDate) - Number(newStartDate)) / MILLIS_PER_DAY;
      return this.clone({
        startDate: newStartDate,
        endDate: newEndDate,
        count: this.count * newDuration / this.duration
      });
    };

    DifferentialIncident.prototype.clone = function(extendProps) {
      var clonedIncident;
      if (extendProps == null) {
        extendProps = {};
      }
      clonedIncident = Object.create(this);
      _.extend(clonedIncident, extendProps);
      return clonedIncident.initialize();
    };

    return DifferentialIncident;

  })();

  module.exports = DifferentialIncident;

}).call(this);
