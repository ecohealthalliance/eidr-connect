import { buildAnnotatedIncidentSnippet } from '/imports/ui/annotation'
import { createIncidentReportsFromEnhancements } from '/imports/utils.coffee'

POPUP_DELAY = 200
POPUP_PADDING = 5
POPUP_PADDING_TOP = 20
POPUP_WINDOW_PADDING = 50

Template.newIncidentFromSelection.onCreated ->
  @selection = window.getSelection()
  @data.selecting.set(true)
  @popupPosition = new ReactiveVar(null)
  range = @selection.getRangeAt(0)
  {top, bottom, left, width} = range.getBoundingClientRect()
  selectionHeight = bottom - top
  topPosition = "#{Math.floor(top + selectionHeight + POPUP_PADDING)}px"
  bottomPosition = 'auto'
  # Handle case when selection is near bottom of window
  if (bottom + POPUP_WINDOW_PADDING) > window.innerHeight
    topPosition = 'auto'
    bottomPosition = "#{window.innerHeight - top + POPUP_PADDING_TOP}px"
  @popupPosition.set
    top: topPosition
    bottom: bottomPosition
    left:  "#{Math.floor(left + width / 2)}px"


Template.newIncidentFromSelection.onRendered ->
  Meteor.setTimeout =>
    @$('.new-incident-from-selection').addClass('active')
  , @data.popupDelay or POPUP_DELAY

  @autorun =>
    if not @data.selecting.get()
      @$('.new-incident-from-selection').remove()
      @data.scrolled.set(false)

  @autorun =>
    if @data.scrolled.get()
      @popupPosition.set
        width: '100%'
        top: "#{$('.curator-source-details--actions').outerHeight()}px"
        left: "auto"
        bottom: 'auto'

Template.newIncidentFromSelection.helpers
  position: ->
    Template.instance().popupPosition.get()

  scrolled: ->
    Template.instance().data.scrolled.get()

  annotatedText: ->
    instance = Template.instance()
    selection = instance.selection
    range = selection.getRangeAt(0)
    textOffsets = [range.startOffset, range.endOffset]
    content = selection.anchorNode.textContent
    content.slice(textOffsets[0], textOffsets[1])

Template.newIncidentFromSelection.events
  'mousedown .add-incident-from-selection': (event, instance) ->
    source = instance.data.source
    range = instance.selection.getRangeAt(0)
    incident = createIncidentReportsFromEnhancements(source.enhancements,
      countAnnotations: [
        textOffsets: [[range.startOffset, range.endOffset]]
      ]
      articleId: source._id
    )[0]
    incident.autogenerated = false
    snippetHtml = buildAnnotatedIncidentSnippet(
      source.enhancements.source.cleanContent.content, incident
    )
    Modal.show 'suggestedIncidentModal',
      articleId: source._id
      incident: incident
      incidentText: Spacebars.SafeString(snippetHtml)
      offCanvasStartPosition: 'top'
      showBackdrop: true

    window.getSelection().removeAllRanges()
